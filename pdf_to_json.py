# -*- coding: utf-8 -*-
"""pdf to json.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwP69vS0IQZ_C59o1dwjVqv92iiTPRLX
"""

# Colab: install packages
!pip -q install pymupdf pillow pytesseract

# Optional OCR engine (required only if enabling OCR fallback below)
# Comment out if you do not need OCR for scanned PDFs
!apt-get -y install tesseract-ocr

import io, json, zipfile, pathlib
import fitz  # PyMuPDF
from google.colab import files

# Toggle OCR for scanned PDFs (True to enable OCR fallback)
OCR_ENABLED = True

# Only needed if OCR_ENABLED is True
if OCR_ENABLED:
    from PIL import Image
    import pytesseract

def page_text_with_optional_ocr(page):
    # Try direct text extraction first
    txt = page.get_text("text") or ""  # PyMuPDF plain text mode
    if txt.strip():
        return txt.strip()
    # Fallback to OCR if enabled
    if not OCR_ENABLED:
        return txt.strip()
    # Render page and OCR
    pix = page.get_pixmap(dpi=200)
    if pix.alpha:  # remove alpha for PIL
        pix = fitz.Pixmap(fitz.csRGB, pix)
    img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
    ocr_txt = pytesseract.image_to_string(img) or ""
    return ocr_txt.strip()

def pdf_to_json_bytes(filename: str, file_bytes: bytes) -> bytes:
    doc = fitz.open(stream=file_bytes, filetype="pdf")
    pages = []
    for i, page in enumerate(doc, start=1):
        text = page_text_with_optional_ocr(page)
        pages.append({"page_number": i, "text": text})
    data = {
        "file_name": filename,
        "page_count": len(doc),
        "pages": pages
    }
    return json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8")

# 1) Prompt for multiple PDFs
uploaded = files.upload()  # returns dict: {filename: bytes}

# 2) Convert each to a JSON file in memory and write to ZIP
zip_buf = io.BytesIO()
with zipfile.ZipFile(zip_buf, mode="w", compression=zipfile.ZIP_DEFLATED) as zf:
    for name, content in uploaded.items():
        try:
            stem = pathlib.Path(name).stem
            json_bytes = pdf_to_json_bytes(name, content)
            zf.writestr(f"{stem}.json", json_bytes)
        except Exception as e:
            zf.writestr(f"{stem}__ERROR.txt", str(e))

# 3) Save ZIP to disk and trigger download
zip_path = "converted_jsons.zip"
with open(zip_path, "wb") as f:
    f.write(zip_buf.getvalue())

files.download(zip_path)  # prompts browser download